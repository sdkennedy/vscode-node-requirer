{"version":3,"sources":["../../../../src/features/import-completion-item-provider/index.js"],"names":[],"mappings":";;;;;;;;QAYgB,iB,GAAA,iB;QAWA,gB,GAAA,gB;;AAvBhB;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC5B,WAAO,cACH,gBAAK,OAAL,EAAc,cAAd,CADG,CAAP;AAGH;;AAEM,SAAS,iBAAT,CAA2B,OAA3B,EAAoC;AACvC,WAAO,cAAc,OAAd,EAAuB,IAAvB,CACH;AAAA,eAAM,OAAN;AAAA,KADG,EAEH,YAAM;AACF,YAAM,gBAAgB,gBAAK,OAAL,EAAc,IAAd,CAAtB;AACA,YAAM,mBAAmB,kBAAkB,OAA3C;AACA,eAAO,mBAAmB,kBAAkB,aAAlB,CAAnB,GAAsD,IAA7D;AACH,KANE,CAAP;AAQH;;AAEM,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AACnC,QAAM,SAAS,EAAf;AACA,QAAM,iBAAiB,2BACnB,KAAK,MAAL,GAAc,MAAd,WAA6B,KAAK,MAAL,CAAY,CAAC,CAAD,IAAM,SAAS,CAAf,CAAZ,CAA7B,GAAgE,IAD7C,CAAvB;AAGA,mBAAe,UAAf,GAA4B,kBAAY,IAAZ,CAA5B;AACA,WAAO,cAAP;AACH;;IAEoB,4B;;;;;;;+CACM,Q,EAAU,Q,EAAU,K,EAAO;AAAA,gBACvC,QADuC,GAC3B,QAD2B,CACvC,QADuC;;AAE9C,gBAAI,CAAC,QAAL,EAAe;AACX,uBAAO,EAAP;AACH;AACD,gBAAM,UAAU,mBAAQ,QAAR,CAAhB;AACA,mBAAO,kBAAkB,OAAlB,EACF,IADE,CACG;AAAA,uBAAQ,OAAO,uBAAS,IAAT,EAAe,QAAf,CAAP,GAAkC,EAA1C;AAAA,aADH,EAEF,IAFE,CAEG;AAAA,uBAAS,MAAM,GAAN,CAAU,gBAAV,CAAT;AAAA,aAFH,CAAP;AAGH;;;;;;kBAVgB,4B","file":"index.js","sourcesContent":["import {stat} from 'mz/fs';\nimport {dirname, join} from 'path';\nimport {CompletionItem} from 'vscode';\nimport getFiles from './finders';\nimport toEs6Import from './formatters/es6';\n\nfunction packageExists(dirPath) {\n    return stat(\n        join(dirPath, 'package.json')\n    );\n}\n\nexport function getPackageDirPath(dirPath) {\n    return packageExists(dirPath).then(\n        () => dirPath,\n        () => {\n            const parentDirPath = join(dirPath, '..');\n            const hasParentDirPath = parentDirPath !== dirPath;\n            return hasParentDirPath ? getPackageDirPath(parentDirPath) : null;\n        }\n    )\n}\n\nexport function toCompletionItem(path) {\n    const maxLen = 90;\n    const completionItem = new CompletionItem(\n        path.length > maxLen ? `...${path.substr(-1 * (maxLen - 3))}` : path\n    );\n    completionItem.insertText = toEs6Import(path);\n    return completionItem;\n}\n\nexport default class ImportCompletionItemProvider {\n    provideCompletionItems(document, position, token) {\n        const {fileName} = document;\n        if (!fileName) {\n            return [];\n        }\n        const dirPath = dirname(fileName);\n        return getPackageDirPath(dirPath)\n            .then(path => path ? getFiles(path, fileName) : [])\n            .then(files => files.map(toCompletionItem));\n    }\n}"]}