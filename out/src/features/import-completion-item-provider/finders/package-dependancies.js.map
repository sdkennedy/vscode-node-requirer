{"version":3,"sources":["../../../../../src/features/import-completion-item-provider/finders/package-dependancies.js"],"names":[],"mappings":";;;;;kBAwCwB,yB;;AAxCxB;;AACA;;AACA;;;;AACA;;;;AAEA,SAAS,eAAT,CAAyB,cAAzB,EAAyC;AACrC,QAAM,cAAc,gBAAK,cAAL,EAAqB,cAArB,CAApB;AACA,WAAO,kBAAS,WAAT;;AAAA,KAEF,IAFE,CAEG,KAAK,KAFR;;AAAA,KAIF,KAJE,CAII;AAAA,eAAO,EAAP;AAAA,KAJJ,EAKF,IALE,CAKG,YAAc;AAAA,YAAb,GAAa,yDAAP,EAAO;AAAA,gCAKZ,GALY,CAEZ,YAFY;AAAA,YAEZ,YAFY,qCAEG,EAFH;AAAA,mCAKZ,GALY,CAGZ,eAHY;AAAA,YAGZ,eAHY,wCAGM,EAHN;AAAA,oCAKZ,GALY,CAIZ,oBAJY;AAAA,YAIZ,oBAJY,yCAIW,EAJX;;;AAOhB,eAAO,OAAO,IAAP,CACH,OAAO,MAAP,CACI,EADJ,EAEI,eAFJ,EAGI,YAHJ,EAII,oBAJJ,CADG,CAAP;AAQH,KApBE,CAAP;AAqBH;;AAED,IAAM,iBAAiB,SAAjB,cAAiB;AAAA,WAAQ,oBAAS,IAAT,MAAmB,UAA3B;AAAA,CAAvB;AACA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AAClC,WAAO,8BAAkB,QAAlB,EACF,KADE,CACI;AAAA,eAAM,EAAN;AAAA,KADJ,EAEF,IAFE,CAEG;AAAA,eAAS,MACV,MADU,CACH,cADG,EAEV,MAFU,CAEH,QAFG,CAAT;AAAA,KAFH,CAAP;AAMH;;AAEc,SAAS,yBAAT,CAAmC,cAAnC,EAAmD;AAC9D,QAAM,cAAc,gBAAK,cAAL,EAAqB,cAArB,CAApB;AACA,QAAM,cAAc,SAAd,WAAc;AAAA,eAAQ,gBAAK,WAAL,EAAkB,IAAlB,CAAR;AAAA,KAApB;AACA,WAAO,gBAAgB,cAAhB,EACF,IADE,CACG;AAAA,eAAgB,aAAa,GAAb,CAAiB,WAAjB,CAAhB;AAAA,KADH,EAEF,IAFE,CAEG;AAAA,eAAS,QAAQ,GAAR,CACX,MAAM,GAAN,CAAU,kBAAV,CADW,CAAT;AAAA,KAFH,EAKF,IALE,gBAMF,IANE,CAMG;AAAA,eAAS,MAAM,GAAN,CACX;AAAA,mBAAQ,oBAAS,WAAT,EAAsB,IAAtB,CAAR;AAAA,SADW,CAAT;AAAA,KANH,CAAP;AASH","file":"package-dependancies.js","sourcesContent":["import {readFile} from 'mz/fs';\nimport {basename, join, relative} from 'path';\nimport getDirectoryFiles from './directory-files';\nimport {bind as $, flatten} from '../../../util';\n\nfunction getDependancies(packageDirPath) {\n    const packagePath = join(packageDirPath, 'package.json');\n    return readFile(packagePath)\n        // To package object\n        .then(JSON.parse)\n        // Account for missing or invalid package.json\n        .catch(() => ({}))\n        .then((pkg = {}) => {\n            const {\n                dependencies = {},\n                devDependencies = {},\n                optionalDependencies = {}\n            } = pkg;\n            // Return set of all dependancy names\n            return Object.keys(\n                Object.assign(\n                    {},\n                    devDependencies,\n                    dependencies,\n                    optionalDependencies\n                )\n            );\n        });\n}\n\nconst isNotIndexFile = path => basename(path) !== 'index.js';\nfunction getDependancyFiles(rootPath) {\n    return getDirectoryFiles(rootPath)\n        .catch(() => [])\n        .then(files => files\n            .filter(isNotIndexFile)\n            .concat(rootPath)\n        );\n}\n\nexport default function getPackageDependancyFiles(packageDirPath) {\n    const modulesPath = join(packageDirPath, 'node_modules');\n    const joinPackage = path => join(modulesPath, path);\n    return getDependancies(packageDirPath)\n        .then(dependencies => dependencies.map(joinPackage))\n        .then(paths => Promise.all(\n            paths.map(getDependancyFiles)\n        ))\n        .then(flatten)\n        .then(files => files.map(\n            file => relative(modulesPath, file)\n        ));\n}"]}